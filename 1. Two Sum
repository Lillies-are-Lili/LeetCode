1. Two Sum


Instruction: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Solution: 
class Solution {
    public int[] twoSum(int[] nums, int target) {
      HashMap<Integer,Integer> hm = new HashMap<>();
      int length = nums.length;

      for(int i = 0; i< length; i++){
          int otherNum = target - nums[i];
          if(hm.containsKey(otherNum)){
              return new int[]{hm.get(otherNum), i};
          }
          hm.put(nums[i], i);
      }//ending for loop
      return new int[]{};
    }//ending method
}

/**
I wanted to implement HashMaps to further my understanding of hashmaps. I viewed a different solution which seemed easier to do but utilizing hashmaps would 
challenge me to go outside my comfort zone.
*/
